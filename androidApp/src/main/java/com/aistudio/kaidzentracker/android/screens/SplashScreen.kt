package com.aistudio.kaidzentracker.android.screensimport androidx.compose.animation.*import androidx.compose.animation.core.LinearEasingimport androidx.compose.animation.core.LinearOutSlowInEasingimport androidx.compose.animation.core.tweenimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.material.MaterialThemeimport androidx.compose.material.Textimport androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport coil.compose.AsyncImageimport com.aistudio.kaidzentracker.android.Rimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.AutoResizeTextimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.FontSizeRangeimport com.aistudio.kaidzentracker.android.theme.PrimaryVariantimport kotlinx.coroutines.delayimport kotlinx.coroutines.launch@OptIn(ExperimentalAnimationApi::class)@Composablefun SplashScreen(modifier: Modifier, navController: NavController) {    Test(modifier = modifier, navController = navController)}@Composablefun Test(modifier: Modifier, navController: NavController) {    var visible by remember { mutableStateOf(false) }    Box(modifier = modifier        .fillMaxSize()        .clickable { visible = !visible }) {        AnimatedVisibility(            visible = visible,            modifier = modifier                .padding(top = 25.dp)                .align(Alignment.TopCenter),            enter = fadeIn(animationSpec = tween(durationMillis = 1000, easing = LinearEasing)),            exit = fadeOut(animationSpec = tween(durationMillis = 1000,                easing = LinearOutSlowInEasing))        ) {            Text(                text = "КайдзенТрекер",                modifier = modifier.align(Alignment.CenterEnd),                style = MaterialTheme.typography.h1,                fontSize = 24.sp,            )        }        AnimatedVisibility(            visible = visible,            modifier = modifier.align(Alignment.Center),            enter = fadeIn(animationSpec = tween(durationMillis = 3000, easing = LinearEasing)),            exit = fadeOut(animationSpec = tween(durationMillis = 3000,                easing = LinearOutSlowInEasing)),        ) { AsyncImage(model = R.drawable.logo, contentDescription = "") }        AnimatedVisibility(            visible = visible,            modifier = modifier                .padding(bottom = 25.dp)                .padding(6.dp)                .align(Alignment.BottomCenter),            enter = fadeIn(animationSpec = tween(durationMillis = 1000, easing = LinearEasing)),            exit = fadeOut(animationSpec = tween(durationMillis = 1000,                easing = LinearOutSlowInEasing))        ) {            Column(modifier = modifier) {                AutoResizeText(                    text = "Сергей Корчагин",                    maxLines = 1,                    color = PrimaryVariant,                    modifier = modifier,                    fontSizeRange = FontSizeRange(                        min = 5.sp,                        max = 16.sp,                    ),                    overflow = TextOverflow.Ellipsis,                    style = MaterialTheme.typography.h1,                )                Spacer(modifier = modifier.height(1.dp))                AutoResizeText(                    text = "архитектор производственных систем",                    maxLines = 1,                    color = PrimaryVariant,                    modifier = modifier,                    fontSizeRange = FontSizeRange(                        min = 5.sp,                        max = 16.sp,                    ),                    overflow = TextOverflow.Ellipsis,                    style = MaterialTheme.typography.body1,                )            }        }    }    LaunchedEffect(key1 = Unit) {        launch {            visible = true            delay(3000)            navController.navigate(route = "kdiScreen")        }    }}