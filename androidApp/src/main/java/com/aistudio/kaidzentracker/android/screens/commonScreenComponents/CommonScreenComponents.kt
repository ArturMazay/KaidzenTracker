package com.aistudio.kaidzentracker.android.screens.commonScreenComponentsimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.animation.core.LinearEasingimport androidx.compose.animation.core.LinearOutSlowInEasingimport androidx.compose.animation.core.tweenimport androidx.compose.animation.fadeInimport androidx.compose.animation.fadeOutimport androidx.compose.foundation.BorderStrokeimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.drawWithContentimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.font.FontStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.text.style.TextDecorationimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.TextUnitimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport coil.compose.AsyncImageimport coil.request.ImageRequestimport com.aistudio.kaidzentracker.android.Rimport com.aistudio.kaidzentracker.android.theme.Primaryimport com.aistudio.kaidzentracker.android.theme.PrimaryVariantimport com.chargemap.compose.numberpicker.NumberPickerimport com.vanpra.composematerialdialogs.MaterialDialogimport com.vanpra.composematerialdialogs.rememberMaterialDialogState@Composablefun ButtonStart(modifier: Modifier, onClick: () -> Unit, textButtons: String) {    Box(modifier = modifier        .fillMaxWidth()        .wrapContentHeight(), contentAlignment = Alignment.Center) {        Row {            OutlinedButton(onClick = { onClick() },                colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                modifier = modifier,                border = BorderStroke(width = 2.5.dp, color = PrimaryVariant)            ) {                Text(text = textButtons,                    style = MaterialTheme.typography.body1,                    fontSize = 14.sp,                    fontWeight = FontWeight.SemiBold)            }        }    }}@Composablefun CommonButtons(    modifier: Modifier,    onClickBack: () -> Unit,    onClickNext: () -> Unit,    onClickSave: () -> Unit,    onClickDelete: () -> Unit,    textButtons: String = "Вперед",    navController: NavController) {    Box(modifier = modifier        .padding(horizontal = 8.dp)        .fillMaxWidth()        .wrapContentHeight(), contentAlignment = Alignment.Center) {        Column (modifier, verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally){            OutlinedButton(                colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                onClick = { navController.navigate(route = "kdiScreen")},                modifier = modifier                    .padding(end = 4.dp)                    .size(50.dp),                // .align(Alignment.CenterEnd),                shape = CircleShape,                border = BorderStroke(2.5.dp, PrimaryVariant),                contentPadding = PaddingValues(0.dp),            ) {                Icon(painter = painterResource(R.drawable.ic_baseline_home_work_24),                    contentDescription = "", tint = PrimaryVariant)            }            Row {                OutlinedButton(onClick = { onClickBack() },                    colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                    modifier = modifier,                    border = BorderStroke(width = 2.5.dp, color = PrimaryVariant)                ) {                    Text(text = "Назад",                        style = MaterialTheme.typography.body2,                        fontWeight = FontWeight.SemiBold)                }                Spacer(modifier = modifier.width(2.dp))                OutlinedButton(onClick = { onClickDelete() },                    colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                    modifier = modifier,                    border = BorderStroke(width = 2.5.dp, color = PrimaryVariant)) {                    Text(text = "Удалить",                        style = MaterialTheme.typography.body2,                        fontWeight = FontWeight.SemiBold)                }                Spacer(modifier = modifier.width(2.dp))                OutlinedButton(onClick = { onClickSave() },                    colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                    modifier = modifier,                    border = BorderStroke(width = 2.5.dp, color = PrimaryVariant)) {                    Text(text = "Сохранить",                        style = MaterialTheme.typography.body2,                        fontWeight = FontWeight.SemiBold)                }                Spacer(modifier = modifier.width(2.dp))                OutlinedButton(onClick = { onClickNext() },                    colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                    modifier = modifier,                    border = BorderStroke(width = 2.5.dp, color = PrimaryVariant)) {                    Text(text = textButtons,                        style = MaterialTheme.typography.body2,                        fontWeight = FontWeight.SemiBold)                }            }        }    }}@Composablefun CommonHeaderText(    modifier: Modifier,    textHeader: String,    colorBackgraund: Color,    height: Int,    shape: Int,    paddingHorizontal: Int,) {    Box(modifier = modifier        .padding(vertical = 4.dp)        .padding(horizontal = paddingHorizontal.dp)        .fillMaxWidth()        .height(height.dp)        .background(color = colorBackgraund)        .border(width = 1.5.dp,            color = PrimaryVariant,            shape = RoundedCornerShape(shape.dp)),        contentAlignment = Alignment.Center) {        AutoResizeText(text = textHeader,            maxLines = 1,            textAlign = TextAlign.Center,            color = Color.White,            modifier = modifier,            fontSizeRange = FontSizeRange(                min = 2.sp,                max = 16.sp,            ),            overflow = TextOverflow.Ellipsis,            style = MaterialTheme.typography.h1)    }}@Composablefun TextCriteria(modifier: Modifier, textFirst: String, textSecond: String) {    Row(modifier = modifier.padding(4.dp),        verticalAlignment = Alignment.CenterVertically,        horizontalArrangement = Arrangement.Center) {        AutoResizeText(text = textFirst,            maxLines = 1,            textAlign = TextAlign.Center,            color = Primary,            modifier = modifier,            fontSizeRange = FontSizeRange(                min = 2.sp,                max = 12.sp,            ),            overflow = TextOverflow.Ellipsis,            style = MaterialTheme.typography.body1,            fontWeight = FontWeight.Bold)        Spacer(modifier = modifier.padding(4.dp))        AutoResizeText(text = textSecond,            maxLines = 1,            textAlign = TextAlign.Center,            color = Primary,            modifier = modifier,            fontSizeRange = FontSizeRange(                min = 2.sp,                max = 12.sp,            ),            overflow = TextOverflow.Ellipsis,            style = MaterialTheme.typography.body1,            fontWeight = FontWeight.Bold)    }}@Composablefun CommonEvaluationCriteria(modifier: Modifier) {    Box(modifier = modifier        .padding(horizontal = 6.dp)        .padding(top = 10.dp)        .wrapContentSize()        .border(width = 1.5.dp,            shape = RoundedCornerShape(5.dp),            color = MaterialTheme.colors.primaryVariant),        contentAlignment = Alignment.TopCenter    ) {        AutoResizeText(            text = "Оценка выставляется от 1-го до 10-ти",            maxLines = 1,            modifier = modifier                .padding(5.dp)                .align(Alignment.TopCenter),            fontSizeRange = FontSizeRange(                min = 6.sp,                max = 15.sp,            ),            overflow = TextOverflow.Ellipsis,            style = MaterialTheme.typography.h1,        )        AutoResizeText(            text = "Равно  0%  - 0",            maxLines = 1,            modifier = modifier                .padding(19.dp)                .align(Alignment.TopCenter),            fontSizeRange = FontSizeRange(                min = 6.sp,                max = 12.sp,            ),            overflow = TextOverflow.Ellipsis,            style = MaterialTheme.typography.h1,        )        Column(modifier = modifier            .padding(top = 22.dp)            .padding(8.dp)            .align(Alignment.Center)) {            TextCriteria(modifier = modifier,                textFirst = "Свыше 0% до 10% - 1",                textSecond = "  Свыше 50% до 60% - 6")            TextCriteria(modifier = modifier,                textFirst = "Свыше 10% до 20% - 2",                textSecond = "Свыше 60% до 70% - 7")            TextCriteria(modifier = modifier,                textFirst = "Свыше 20% до 30% - 3",                textSecond = "Свыше 70% до 80% - 8")            TextCriteria(modifier = modifier,                textFirst = "Свыше 30% до 40% - 4",                textSecond = "Свыше 80% до 90% - 9")            TextCriteria(modifier = modifier,                textFirst = "Свыше 40% до 50% - 5",                textSecond = "Свыше 90% до 100% - 10")        }    }}@Composablefun CommonTableHeader(modifier: Modifier) {    Box(modifier = modifier        .padding(horizontal = 6.dp)        .fillMaxWidth()        .wrapContentHeight()    ) {        Box(modifier = modifier            .padding(4.dp)            .align(Alignment.CenterStart)) {            Text(text = "№",                color = Primary,                style = MaterialTheme.typography.h1,                fontSize = 12.sp)        }        Box(modifier = modifier.align(Alignment.Center)) {            Text(text = "Проверяемый критерий",                color = Primary,                style = MaterialTheme.typography.h1,                fontSize = 13.sp)        }    }}@Composablefun CommonLogoAppBar(modifier: Modifier, isAnimated: Boolean = false) {    Box(modifier = modifier        .padding(5.dp)        .fillMaxWidth()        .height(150.dp)        .border(width = 2.5.dp,            shape = RoundedCornerShape(5.dp),            color = MaterialTheme.colors.primaryVariant),        contentAlignment = Alignment.Center    ) {        AnimatedVisibility(            visible = isAnimated,            modifier = modifier                .padding(top = 8.dp, end = 8.dp)                .align(Alignment.TopEnd),            enter = fadeIn(animationSpec = tween(durationMillis = 1000, easing = LinearEasing)),            exit = fadeOut(animationSpec = tween(durationMillis = 1000,                easing = LinearOutSlowInEasing))        ) {            Text(                text = "КайдзенТрекер",                modifier = modifier.align(Alignment.CenterEnd),                style = MaterialTheme.typography.h1,                fontSize = 16.sp,            )        }        AsyncImage(model = R.drawable.logo, contentDescription = "logo")        AnimatedVisibility(            visible = isAnimated,            modifier = modifier                .padding(bottom = 4.dp, end = 6.dp)                .align(Alignment.BottomEnd),            enter = fadeIn(animationSpec = tween(durationMillis = 1000, easing = LinearEasing)),            exit = fadeOut(animationSpec = tween(durationMillis = 1000,                easing = LinearOutSlowInEasing))        ) {            Text(                text = "Сергей Корчагин ",                modifier = modifier.align(Alignment.BottomEnd),                style = MaterialTheme.typography.h1,                fontSize = 16.sp,            )        }    }}@Composablefun CommonButtonsInput(    modifier: Modifier, value: Int,    onValueChange: (Int) -> Unit,    textQuestions: String,    numberQuestions: String,    textRecommendation: String,) {    val dialogState = rememberMaterialDialogState()    var expanded by remember { mutableStateOf(false) }    MaterialDialog(        backgroundColor = Color.White,        border = BorderStroke(width = 1.5.dp, color = PrimaryVariant),        dialogState = dialogState,        buttons = {            positiveButton("Сохранить", textStyle = MaterialTheme.typography.body2) {            }            negativeButton("Отменить", textStyle = MaterialTheme.typography.body2)        }    ) {        Box(modifier = modifier            .wrapContentSize()            .background(color = Color.White),            contentAlignment = Alignment.Center) {            Column(modifier = modifier.fillMaxSize(),                verticalArrangement = Arrangement.Center,                horizontalAlignment = Alignment.CenterHorizontally) {                CommonEvaluationCriteria(modifier = modifier)                NumberPicker(                    modifier = modifier                        .wrapContentSize(),                    textStyle = MaterialTheme.typography.h3,                    dividersColor = PrimaryVariant,                    value = value,                    range = 0..10,                    onValueChange = onValueChange                )            }        }    }    Box(modifier = modifier        .padding(horizontal = 6.dp, vertical = 2.dp)        .fillMaxWidth()        .border(width = 2.5.dp, color = PrimaryVariant, shape = RoundedCornerShape(5.dp))        .padding(vertical = 10.dp)        .background(color = Color.White)    ) {        Column {            Box(modifier = modifier.fillMaxSize()) {                Text(text = numberQuestions,                    fontSize = 16.sp,                    color = Primary,                    style = MaterialTheme.typography.body1,                    modifier = modifier                        .padding(start = 6.dp)                        .align(Alignment.CenterStart)                )                AutoResizeText(text = textQuestions,                 //   maxLines = 1,                   // textAlign = TextAlign.Center,                    color = Primary,                    modifier = modifier                        .padding(start = 28.dp, end = 80.dp)                        .fillMaxHeight()                        .fillMaxWidth()                        .align(Alignment.Center)                    ,                    fontSizeRange = FontSizeRange(                        min = 2.sp,                        max = 16.sp,                    ),                    overflow = TextOverflow.Ellipsis,                    style = MaterialTheme.typography.body1)//                Text(text = textQuestions,//                    fontSize = 16.sp,//                    textAlign = TextAlign.Left,//                    style = MaterialTheme.typography.body1,//                    modifier = modifier//                        .padding(start = 28.dp, end = 80.dp)//                        .fillMaxHeight()//                        .fillMaxWidth()//                        .align(Alignment.Center)             //   )                OutlinedButton(                    colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),                    onClick = { dialogState.show() },                    modifier = modifier                        .padding(end = 4.dp)                        .size(70.dp)                        .align(Alignment.CenterEnd),                    shape = CircleShape,                    border = BorderStroke(2.5.dp, PrimaryVariant),                    contentPadding = PaddingValues(0.dp),                ) {                    AutoResizeText(text = value.toString(),                        maxLines = 1,                        textAlign = TextAlign.Center,                        color = Primary,                        modifier = modifier,                        fontSizeRange = FontSizeRange(                            min = 2.sp,                            max = 40.sp,                        ),                        overflow = TextOverflow.Ellipsis,                        style = MaterialTheme.typography.h3)                }            }            Divider(modifier = modifier.padding(top = 6.dp),                color = PrimaryVariant, thickness = 2.5.dp)            Box(modifier = modifier                .padding(top = 8.dp)                .fillMaxSize()                .clickable { expanded = !expanded }, contentAlignment = Alignment.Center) {                Text(                    text = "Открыть рекомендации",                    textAlign = TextAlign.Center,                    fontSize = 16.sp,                    style = MaterialTheme.typography.body1,                    modifier = modifier                        .clickable { expanded = !expanded }                )            }            if (expanded) {                Text(                    text = textRecommendation,                    fontSize = 16.sp,                    style = MaterialTheme.typography.body1,                    textAlign = TextAlign.Center,                    modifier = modifier                        .fillMaxWidth()                        .wrapContentHeight(Alignment.CenterVertically)                        .padding(10.dp)                        .clickable { expanded = !expanded }                )            }        }    }}@Composablefun ResultView(modifier: Modifier, textResult: String, text: String) {    Box(modifier = modifier        .padding(horizontal = 5.dp, vertical = 4.dp)        .fillMaxWidth()        .wrapContentHeight()        .border(width = 1.5.dp, color = PrimaryVariant, shape = RoundedCornerShape(2.dp))        .padding(4.dp)    ) {        Text(text = text,            color = Primary,            style = MaterialTheme.typography.body1,            modifier = modifier                .padding(start = 4.dp)                .align(Alignment.CenterStart))        Text(text = textResult,            color = Primary,            style = MaterialTheme.typography.body1,            modifier = modifier                .padding(end = 4.dp)                .align(Alignment.CenterEnd))    }}@Composablefun AdsView(modifier: Modifier, navController: NavController) {    Box(modifier = modifier        .padding(horizontal = 5.dp)        .fillMaxWidth()        .height(150.dp)        .border(width = 2.5.dp, color = PrimaryVariant, shape = RoundedCornerShape(5.dp))        .clickable { navController.navigate(route = "resumeScreen") }    ) {        AsyncImage(model = R.drawable.logo, contentDescription = " logo", modifier = modifier            .padding(start = 4.dp)            .align(                Alignment.CenterStart))        Text(text = "Посмотрите информацию о нас",            style = MaterialTheme.typography.h1,            fontWeight = FontWeight.Bold,            modifier = modifier                .padding(top = 6.dp, start = 6.dp)                .align(Alignment.TopStart))        Text(text = "Искренне Ваш Сергей Евгеньевич Корчагин",            style = MaterialTheme.typography.h1,            fontWeight = FontWeight.Bold,            modifier = modifier                .padding(bottom = 6.dp, end = 8.dp)                .align(Alignment.BottomEnd))        AsyncImage(model = ImageRequest.Builder(LocalContext.current)            .data(R.drawable.avakaidzen)            .crossfade(true)            .build(), contentDescription = "ava", modifier = modifier            .padding(end = 8.dp, top = 6.dp)            .border(shape = CircleShape, width = 2.5.dp, color = PrimaryVariant)            .clip(CircleShape)            .size(90.dp)            .align(Alignment.TopEnd))    }}@Composablefun AutoResizeText(    text: String,    fontSizeRange: FontSizeRange,    modifier: Modifier = Modifier,    color: Color = Color.Unspecified,    fontStyle: FontStyle? = null,    fontWeight: FontWeight? = null,    fontFamily: FontFamily? = null,    letterSpacing: TextUnit = TextUnit.Unspecified,    textDecoration: TextDecoration? = null,    textAlign: TextAlign? = null,    lineHeight: TextUnit = TextUnit.Unspecified,    overflow: TextOverflow = TextOverflow.Clip,    softWrap: Boolean = true,    maxLines: Int = Int.MAX_VALUE,    style: TextStyle = LocalTextStyle.current,) {    var fontSizeValue by remember { mutableStateOf(fontSizeRange.max.value) }    var readyToDraw by remember { mutableStateOf(false) }    Text(        text = text,        color = color,        maxLines = maxLines,        fontStyle = fontStyle,        fontWeight = fontWeight,        fontFamily = fontFamily,        letterSpacing = letterSpacing,        textDecoration = textDecoration,        textAlign = textAlign,        lineHeight = lineHeight,        overflow = overflow,        softWrap = softWrap,        style = style,        fontSize = fontSizeValue.sp,        onTextLayout = {            // Timber.d("onTextLayout")            if (it.didOverflowHeight && !readyToDraw) {                //  Timber.d("Did Overflow height, calculate next font size value")                val nextFontSizeValue = fontSizeValue - fontSizeRange.step.value                if (nextFontSizeValue <= fontSizeRange.min.value) {                    // Reached minimum, set minimum font size and it's readToDraw                    fontSizeValue = fontSizeRange.min.value                    readyToDraw = true                } else {                    // Text doesn't fit yet and haven't reached minimum text range, keep decreasing                    fontSizeValue = nextFontSizeValue                }            } else {                // Text fits before reaching the minimum, it's readyToDraw                readyToDraw = true            }        },        modifier = modifier.drawWithContent { if (readyToDraw) drawContent() }    )}data class FontSizeRange(    val min: TextUnit,    val max: TextUnit,    val step: TextUnit = DEFAULT_TEXT_STEP,) {    init {        require(min < max) { "min should be less than max, $this" }        require(step.value > 0) { "step should be greater than 0, $this" }    }    companion object {        private val DEFAULT_TEXT_STEP = 1.sp    }}