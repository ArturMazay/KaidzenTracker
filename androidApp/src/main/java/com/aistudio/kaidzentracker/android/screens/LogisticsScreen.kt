package com.aistudio.kaidzentracker.android.screensimport android.widget.Toastimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.unit.dpimport androidx.navigation.NavControllerimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.*import com.aistudio.kaidzentracker.android.theme.PrimaryVariantimport com.aistudio.kaidzentracker.android.ui.viewmodels.LogisticScreenViewModelimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport org.koin.androidx.compose.koinViewModelimport kotlin.math.floor@OptIn(ExperimentalFoundationApi::class)@Composablefun LogisticsScreen(    modifier: Modifier,    navController: NavController,    logisticScreenViewModel: LogisticScreenViewModel = koinViewModel(),) {    val context = LocalContext.current    val state = logisticScreenViewModel.logisticScreenState.observeAsState().value    var visible by remember { mutableStateOf(false) }    when (state!!.isLoading) {        false -> Box(modifier = modifier            .fillMaxSize()            .background(color = Color.White)) {            LazyColumn(modifier = modifier.padding(bottom = 45.dp)) {                item {                    CommonLogoAppBar(modifier = modifier, isAnimated = visible)                }                stickyHeader {                    CommonHeaderText(                        modifier = modifier,                        textHeader = "ЛОГИСТИКА",                        colorBackgraund = PrimaryVariant,                        height = 28,                        shape = 5,                        paddingHorizontal = 6                    )                }                item {                    CommonTableHeader(modifier = modifier)                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.firstQuestions.toInt(),                        onValueChange = { firstQuestions ->                            logisticScreenViewModel                                .getIntent(intent = ApplicationIntent                                    .ChangedFirstQuestions(newResult = firstQuestions))                        },                        numberQuestions = "1",                        textQuestions = "Процент бизнес-процессов поставки, за которыми закреплен ответственный.",                        textRecommendation = "1. Составить перечень бизнес-процессов поставки материалов, запасных частей комплектующих и т.д.\n" +                                "2. Для каждого бизнес-процессов поставки материалов, запасных частей комплектующих и т.д. закрепить ответственного.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.secondQuestions.toInt(),                        onValueChange = { secondQuestions ->                            logisticScreenViewModel.getIntent(intent = ApplicationIntent.ChangedSecondQuestions(                                newResult = secondQuestions))                        },                        numberQuestions = "2",                        textQuestions = "Процент логистических процессов оформленных как стандарт.",                        textRecommendation = "Регулярно вести учет логистических бизнес процессов, принятых как стандарт.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.threeQuestions.toInt(),                        onValueChange = { threeQuestions ->                            logisticScreenViewModel.getIntent(intent = ApplicationIntent.ChangedThreeQuestions(                                newResult = threeQuestions))                        },                        numberQuestions = "3",                        textQuestions = "Процент процессов, для которых разработан и применяется Стандарт управления оборотом тары.",                        textRecommendation = "Разработать Стандарт управления оборотом тары разработан и применяется.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fourQuestions.toInt(),                        onValueChange = { fourQuestions ->                            logisticScreenViewModel.getIntent(intent = ApplicationIntent.ChangedFourQuestions(                                newResult = fourQuestions))                        },                        numberQuestions = "4",                        textQuestions = "Процент логистических процессов, охваченных\n" +                                "системой вытягивания (Канбан)",                        textRecommendation = "Регулярно вести учет логистических бизнеспроцессов, охваченных системой вытягивания\n" +                                "(канбан)")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fiveQuestions.toInt(),                        onValueChange = { fiveQuestions ->                            logisticScreenViewModel.getIntent(intent = ApplicationIntent.ChangedFiveQuestions(                                newResult = fiveQuestions))                        },                        numberQuestions = "5",                        textQuestions = "Процент логистических процессов для которых отслеживается уровень оптимальных запасов в потоке",                        textRecommendation = "Организовать и регулярно отслеживать уровень оптимальных запасов в потоке")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.sixQuestions.toInt(),                        onValueChange = { sixQuestions ->                            logisticScreenViewModel.getIntent(intent = ApplicationIntent.ChangedSixQuestions(                                newResult = sixQuestions))                        },                        numberQuestions = "6",                        textQuestions = "Процент складов, на которых применяется система\n" +                                "адресного хранения",                        textRecommendation = "Регулярно вести учет складских бизнес-процессов,\n" +                                "охваченных системой адресного учета")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.sevenQuestions.toInt(),                        onValueChange = { sevenQuestions ->                            logisticScreenViewModel.getIntent(intent = ApplicationIntent.ChangedSevenQuestions(                                newResult = sevenQuestions))                        },                        numberQuestions = "7",                        textQuestions = "Процент сотрудников организаций бизнеспартнеров, прошедших обучение по тренерской программе",                        textRecommendation = "1. Составить пофамильный план-график\n" +                                "обучения сотрудников организаций бизнеспартнеров\n" +                                "2. Организовать обучение сотрудников\n" +                                "организаций бизнес-партнеров\n" +                                "3. Организовать учет результатов обучения\n" +                                "сотрудников организаций бизнес-партнеров")                }                item {                    val result = floor(state.result * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = result.toString(),                        text = "Итог")                }                item {                    val newResult = floor(state.newResult * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = newResult.toString(),                        text = "Предыдущее значение")                }                item {                    AdsView(modifier = modifier, navController = navController)                }            }            CommonButtons(                modifier = modifier.align(Alignment.BottomCenter),                onClickSave = {                    Toast.makeText(context, "Сохранено", Toast.LENGTH_SHORT).show()                    logisticScreenViewModel.getIntent(intent = ApplicationIntent.SaveClicked)                },                onClickDelete = {                    Toast.makeText(context, "Удалено", Toast.LENGTH_SHORT).show()                    logisticScreenViewModel.getIntent(intent = ApplicationIntent.DeletedClicked)                },                onClickNext = { navController.navigate(route = "kdiScreen") },                onClickBack = { navController.popBackStack() },                textButtons = "KDI"                ,navController = navController            )        }        true -> FullScreenLoaderComponent(modifier = modifier)    }    LaunchedEffect(key1 = Unit, block = {        logisticScreenViewModel.getIntent(intent = ApplicationIntent.InitialScreen)        visible = true    })}