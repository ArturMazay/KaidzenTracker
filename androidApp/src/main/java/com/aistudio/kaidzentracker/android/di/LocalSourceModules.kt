package com.aistudio.kaidzentracker.android.diimport android.app.Applicationimport androidx.room.Roomimport com.aistudio.kaidzentracker.android.data.localDataSource.fiveSDataSource.FiveSDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.fiveSDataSource.FiveSDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.fiveSDataSource.FiveSDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.fiveSDataSource.FiveSDbimport com.aistudio.kaidzentracker.android.data.localDataSource.flowDataSource.FlowDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.flowDataSource.FlowDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.flowDataSource.FlowDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.flowDataSource.FlowDbimport com.aistudio.kaidzentracker.android.data.localDataSource.logisticsDataSource.LogisticDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.logisticsDataSource.LogisticDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.logisticsDataSource.LogisticDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.logisticsDataSource.LogisticDbimport com.aistudio.kaidzentracker.android.data.localDataSource.mappingDataSource.MappingDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.mappingDataSource.MappingDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.mappingDataSource.MappingDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.mappingDataSource.MappingDbimport com.aistudio.kaidzentracker.android.data.localDataSource.smedDataSource.SmedDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.smedDataSource.SmedDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.smedDataSource.SmedDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.smedDataSource.SmedDbimport com.aistudio.kaidzentracker.android.data.localDataSource.staffInvolvementDataSource.StaffInvolvementDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.staffInvolvementDataSource.StaffInvolvementDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.staffInvolvementDataSource.StaffInvolvementDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.staffInvolvementDataSource.StaffInvolvementDbimport com.aistudio.kaidzentracker.android.data.localDataSource.staffTrainigDataSource.StaffTrainingDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.staffTrainigDataSource.StaffTrainingDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.staffTrainigDataSource.StaffTrainingDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.staffTrainigDataSource.StaffTrainingDbimport com.aistudio.kaidzentracker.android.data.localDataSource.standartWorkDataSource.StandartWorkDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.standartWorkDataSource.StandartWorkDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.standartWorkDataSource.StandartWorkDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.standartWorkDataSource.StandartWorkDbimport com.aistudio.kaidzentracker.android.data.localDataSource.trmDataSource.TrmDaoimport com.aistudio.kaidzentracker.android.data.localDataSource.trmDataSource.TrmDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.trmDataSource.TrmDataSourceImplimport com.aistudio.kaidzentracker.android.data.localDataSource.trmDataSource.TrmDbimport org.koin.dsl.moduleval localSourceModule = module {    fun provideFiveSDatabase(application: Application): FiveSDb =        Room.databaseBuilder(application, FiveSDb::class.java, "fiveSDb")            .fallbackToDestructiveMigration()            .build()    fun provideFiveSDao(database: FiveSDb): FiveSDao = database.getFiveSDao()    single { provideFiveSDatabase(application = get()) }    single { provideFiveSDao(database = get()) }    single<FiveSDataSource> { FiveSDataSourceImpl(fiveSDao = get()) }    fun provideSmedDatabase(application: Application): SmedDb =        Room.databaseBuilder(application, SmedDb::class.java, "smedDb")            .fallbackToDestructiveMigration()            .build()    fun provideSmedDao(database: SmedDb): SmedDao = database.getDao()    single { provideSmedDatabase(application = get()) }    single { provideSmedDao(database = get()) }    single<SmedDataSource> { SmedDataSourceImpl(smedDao = get()) }    fun provideStandartWorkDatabase(application: Application): StandartWorkDb =        Room.databaseBuilder(application, StandartWorkDb::class.java, "standartWorkDb")            .fallbackToDestructiveMigration()            .build()    fun provideStandartWorkDao(database: StandartWorkDb): StandartWorkDao = database.getDao()    single { provideStandartWorkDatabase(application = get()) }    single { provideStandartWorkDao(database = get()) }    single<StandartWorkDataSource> { StandartWorkDataSourceImpl(standartWorkDao = get()) }    fun provideTrmDatabase(application: Application): TrmDb =        Room.databaseBuilder(application, TrmDb::class.java, "trmDb")            .fallbackToDestructiveMigration()            .build()    fun provideTrmDao(database: TrmDb): TrmDao = database.getTrmDao()    single { provideTrmDatabase(application = get()) }    single { provideTrmDao(database = get()) }    single<TrmDataSource> { TrmDataSourceImpl(trmDao = get()) }    fun provideMappingDatabase(application: Application): MappingDb =        Room.databaseBuilder(application, MappingDb::class.java, "mappingDb")            .fallbackToDestructiveMigration()            .build()    fun provideMappingDao(database: MappingDb): MappingDao = database.getDao()    single { provideMappingDatabase(application = get()) }    single { provideMappingDao(database = get()) }    single<MappingDataSource> { MappingDataSourceImpl(mappingDao = get()) }    fun provideFlowDatabase(application: Application): FlowDb =        Room.databaseBuilder(application, FlowDb::class.java, "flowDb")            .fallbackToDestructiveMigration()            .build()    fun provideFlowDao(database: FlowDb): FlowDao = database.getDao()    single { provideFlowDatabase(application = get()) }    single { provideFlowDao(database = get()) }    single<FlowDataSource> { FlowDataSourceImpl(flowDao = get()) }    fun provideLogisticDatabase(application: Application): LogisticDb =        Room.databaseBuilder(application, LogisticDb::class.java, "logisticDb")            .fallbackToDestructiveMigration()            .build()    fun provideLogisticDao(database: LogisticDb): LogisticDao = database.getDao()    single { provideLogisticDatabase(application = get()) }    single { provideLogisticDao(database = get()) }    single<LogisticDataSource> { LogisticDataSourceImpl(logisticDao = get()) }    fun provideStaffDatabase(application: Application): StaffInvolvementDb =        Room.databaseBuilder(application, StaffInvolvementDb::class.java, "staffDb")            .fallbackToDestructiveMigration()            .build()    fun provideStaffDao(database: StaffInvolvementDb): StaffInvolvementDao = database.getDao()    single { provideStaffDatabase(application = get()) }    single { provideStaffDao(database = get()) }    single<StaffInvolvementDataSource> { StaffInvolvementDataSourceImpl(staffInvolvementDao = get()) }    fun provideStaffTrainingDatabase(application: Application): StaffTrainingDb =        Room.databaseBuilder(application, StaffTrainingDb::class.java, "staffTrainingDb")            .fallbackToDestructiveMigration()            .build()    fun provideStaffTrainingDao(database: StaffTrainingDb): StaffTrainingDao = database.getDao()    single { provideStaffTrainingDatabase(application = get()) }    single { provideStaffTrainingDao(database = get()) }    single<StaffTrainingDataSource> { StaffTrainingDataSourceImpl(staffTrainingDao = get()) }}