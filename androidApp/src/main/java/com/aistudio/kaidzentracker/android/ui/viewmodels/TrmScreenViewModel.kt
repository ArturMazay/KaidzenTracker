package com.aistudio.kaidzentracker.android.ui.viewmodelsimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.aistudio.kaidzentracker.android.domain.trm.Trmimport com.aistudio.kaidzentracker.android.domain.trm.TrmRepositoryimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.IntentHandlerimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass TrmScreenViewModel(private val trmRepository: TrmRepository) : ViewModel(),    IntentHandler<ApplicationIntent> {    private val _trmScreenState: MutableLiveData<Trm> =        MutableLiveData(Trm())    val trmScreenState: LiveData<Trm> = _trmScreenState    override fun getIntent(intent: ApplicationIntent) {        when (val curentViewState = _trmScreenState.value) {            is Trm -> intent(intent, curentViewState)        }    }    private fun intent(intent: ApplicationIntent, curentViewState: Trm) {        when (intent) {            is ApplicationIntent.InitialScreen -> loadDataTrmScreen()            is ApplicationIntent.ChangedFirstQuestions -> _trmScreenState.postValue(                _trmScreenState.value?.copy(firstQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedSecondQuestions -> _trmScreenState.postValue(                _trmScreenState.value?.copy(secondQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedThreeQuestions -> _trmScreenState.postValue(                _trmScreenState.value?.copy(threeQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedFourQuestions -> _trmScreenState.postValue(                _trmScreenState.value?.copy(fourQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedFiveQuestions -> _trmScreenState.postValue(                _trmScreenState.value?.copy(fiveQuestions = intent.newResult.toDouble()))            is ApplicationIntent.SaveClicked -> saveData(state = curentViewState)            is ApplicationIntent.DeletedClicked -> deleteAll()            else -> {}        }    }    private fun saveData(state: Trm) {        viewModelScope.launch(Dispatchers.IO) {            val calc = (                    state.firstQuestions +                            state.secondQuestions +                            state.threeQuestions +                            state.fourQuestions +                            state.fiveQuestions                    ) / 5.toDouble()            trmRepository.save(trm = Trm(                firstQuestions = state.firstQuestions,                secondQuestions = state.secondQuestions,                threeQuestions = state.threeQuestions,                fourQuestions = state.fourQuestions,                fiveQuestions = state.fiveQuestions,                result = calc,                newResult = if (state.result == calc) calc else state.result))            loadDataTrmScreen()        }    }    private fun loadDataTrmScreen() {        viewModelScope.launch(Dispatchers.IO) {            _trmScreenState.postValue(Trm(isLoading = true))            with(trmRepository.get()) {                _trmScreenState.postValue(_trmScreenState.value?.copy(                    isLoading = false,                    firstQuestions = this?.firstQuestions ?: 0.0,                    secondQuestions = this?.secondQuestions ?: 0.0,                    threeQuestions = this?.threeQuestions ?: 0.0,                    fourQuestions = this?.fourQuestions ?: 0.0,                    fiveQuestions = this?.fiveQuestions ?: 0.0,                    result = this?.result ?: 0.0,                    newResult = this?.newResult ?: 0.0))            }        }    }    private fun deleteAll() {        viewModelScope.launch(Dispatchers.IO) {            trmRepository.delete()            loadDataTrmScreen()        }    }}