package com.aistudio.kaidzentracker.android.screensimport android.widget.Toastimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.unit.dpimport androidx.navigation.NavControllerimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.*import com.aistudio.kaidzentracker.android.theme.PrimaryVariantimport com.aistudio.kaidzentracker.android.ui.viewmodels.SmedViewModelimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport org.koin.androidx.compose.koinViewModelimport kotlin.math.floor@OptIn(ExperimentalFoundationApi::class)@Composablefun SMEDScreen(    modifier: Modifier,    navController: NavController,    smedViewModel: SmedViewModel = koinViewModel(),) {    val context = LocalContext.current    val state = smedViewModel.smedScreenState.observeAsState().value    var visible by remember { mutableStateOf(false) }    when (state!!.isLoading) {        false -> Box(modifier = modifier            .fillMaxSize()            .background(color = Color.White)) {            LazyColumn(modifier = modifier.padding(bottom = 45.dp)) {                item {                    CommonLogoAppBar(modifier = modifier, isAnimated = visible)                }                stickyHeader {                    CommonHeaderText(                        modifier = modifier,                        textHeader = "БЫСТРАЯ ПЕРЕНАЛАДКА SMED",                        colorBackgraund = PrimaryVariant,                        height = 28,                        shape = 5,                        paddingHorizontal = 6                    )                }                item {                    CommonTableHeader(modifier = modifier)                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.firstQuestions.toInt(),                        onValueChange = { firstQuestions ->                            smedViewModel.getIntent(intent = ApplicationIntent.ChangedFirstQuestions(                                newResult = firstQuestions))                        },                        numberQuestions = "1",                        textQuestions = "Процент оборудования с внедренной Быстрой переналадкой из общего числа единиц оборудования, на которых проводится переналадка",                        textRecommendation = "1. Составить перечень всех технологических процессов, в которых есть операция переналадки/замены узлов и оборудования.\n" +                                "2. Выбрать технологические процессы, в которых будет внедряться SMED. Составить план-график работ по выбранным процессам")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.secondQuestions.toInt(),                        onValueChange = { secondQuestions ->                            smedViewModel.getIntent(intent = ApplicationIntent.ChangedSecondQuestions(                                newResult = secondQuestions))                        },                        numberQuestions = "2",                        textQuestions = "Процент обученного персонала инструменту Быстрая переналадка",                        textRecommendation = "Провести занятия с персоналом по SMED. Разработать программу занятий. Составить по фамильный план обучения с отметками о выполнении и ФИО преподавателя.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.threeQuestions.toInt(),                        onValueChange = { threeQuestions ->                            smedViewModel.getIntent(intent = ApplicationIntent.ChangedThreeQuestions(                                newResult = threeQuestions))                        },                        numberQuestions = "3",                        textQuestions = "Процент персонала, ознакомленного и соблюдающего стандарт/регламент переналадки из числа работников, занятых в переналадках оборудования.",                        textRecommendation = "Регулярно проводить опрос сотрудников по теме \"Быстрая переналадка SMED\"")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fourQuestions.toInt(),                        onValueChange = { fourQuestions ->                            smedViewModel.getIntent(intent = ApplicationIntent.ChangedFourQuestions(                                newResult = fourQuestions))                        },                        numberQuestions = "4",                        textQuestions = "Процент рабочих мест с визуализацией места хранения инструментов и оснастки, используемых в процессе переналадки из общего числа рабочих мест, на которых проводится переналадка",                        textRecommendation = "Оборудовать и визуализировать места хранения инструментов и оснастки для переналадки")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fiveQuestions.toInt(),                        onValueChange = { fiveQuestions ->                            smedViewModel.getIntent(intent = ApplicationIntent.ChangedFiveQuestions(                                newResult = fiveQuestions))                        },                        numberQuestions = "5",                        textQuestions = "Функционирует система регистрации длительности простоев из-за переналадки оборудования",                        textRecommendation = "Организация и ведение журналов (в т.ч.электронных) выполнения операций переналадки (комбинационные ведомости, время, проблемы, решения)")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.sixQuestions.toInt(),                        onValueChange = { sixQuestions ->                            smedViewModel.getIntent(intent = ApplicationIntent.ChangedSixQuestions(                                newResult = sixQuestions))                        },                        numberQuestions = "6",                        textQuestions = "Цели/задачи по сокращению времени переналадки оборудования установлены на текущий год",                        textRecommendation = "Совместно со службой Kaizen провести анализ переналадки и сформулировать задачи по сокращению времени их выполнения. Результаты закрепить приказом.")                }                item {                    val result = floor(state.result * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = result.toString(),                        text = "Итог")                }                item {                    val newResult = floor(state.newResult * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = newResult.toString(),                        text = "Предыдущее значение")                }            }                    CommonButtons(                        modifier = modifier.align(Alignment.BottomCenter),                        onClickSave = {                            Toast.makeText(context, "Сохранено", Toast.LENGTH_SHORT).show()                            smedViewModel.getIntent(intent = ApplicationIntent.SaveClicked)                        },                        onClickDelete = {                            Toast.makeText(context, "Удалено", Toast.LENGTH_SHORT).show()                            smedViewModel.getIntent(intent = ApplicationIntent.DeletedClicked)},                        onClickNext = {  navController.navigate(route = "standartWorkScreen") },                        onClickBack = { navController.popBackStack()}                        ,navController = navController                    )        }        true -> FullScreenLoaderComponent(modifier = modifier)    }    LaunchedEffect(key1 = Unit, block = {        smedViewModel.getIntent(intent = ApplicationIntent.InitialScreen)        visible = true    })}