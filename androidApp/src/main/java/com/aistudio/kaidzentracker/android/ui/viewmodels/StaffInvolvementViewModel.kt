package com.aistudio.kaidzentracker.android.ui.viewmodelsimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.aistudio.kaidzentracker.android.domain.staffInvolvement.StaffInvolvementimport com.aistudio.kaidzentracker.android.domain.staffInvolvement.StaffInvolvementRepositoryimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.IntentHandlerimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass StaffInvolvementViewModel(private val staffInvolvementRepository: StaffInvolvementRepository) :    ViewModel(), IntentHandler<ApplicationIntent> {    private val _staffInvolvementScreenState: MutableLiveData<StaffInvolvement> =        MutableLiveData(StaffInvolvement())    val staffInvolvementScreenState: LiveData<StaffInvolvement> = _staffInvolvementScreenState    override fun getIntent(intent: ApplicationIntent) {        when (val currentViewState = _staffInvolvementScreenState.value) {            is StaffInvolvement -> intent(intent, currentViewState)        }    }    private fun intent(intent: ApplicationIntent, currentViewState: StaffInvolvement) {        when (intent) {            is ApplicationIntent.InitialScreen -> loadDataScreen()            is ApplicationIntent.ChangedFirstQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(firstQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedSecondQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(secondQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedThreeQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(threeQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedFourQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(fourQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedFiveQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(fiveQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedSixQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(sixQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedSevenQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(sevenQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedEightQuestions -> _staffInvolvementScreenState.postValue(                _staffInvolvementScreenState.value?.copy(eightQuestions = intent.newResult.toDouble()))            is ApplicationIntent.SaveClicked -> saveData(state = currentViewState)            is ApplicationIntent.DeletedClicked -> deleteAll()            else -> {}        }    }    private fun deleteAll() {        viewModelScope.launch(Dispatchers.IO) {            staffInvolvementRepository.delete()            loadDataScreen()        }    }    private fun saveData(state: StaffInvolvement) {        viewModelScope.launch(Dispatchers.IO) {            val calc = (state.firstQuestions +                    state.secondQuestions +                    state.threeQuestions +                    state.fourQuestions +                    state.fiveQuestions +                    state.sixQuestions +                    state.sevenQuestions +                    state.eightQuestions) / 8.toDouble()            staffInvolvementRepository.save(staffInvolvement = StaffInvolvement(                firstQuestions = state.firstQuestions,                secondQuestions = state.secondQuestions,                threeQuestions = state.threeQuestions,                fourQuestions = state.fourQuestions,                fiveQuestions = state.fiveQuestions,                sixQuestions = state.sixQuestions,                sevenQuestions = state.sevenQuestions,                eightQuestions = state.eightQuestions,                result = calc,                newResult = if (state.result == calc) calc else state.result))            loadDataScreen()        }    }    private fun loadDataScreen() {        viewModelScope.launch(Dispatchers.IO) {            _staffInvolvementScreenState.postValue(StaffInvolvement(isLoading = true))            with(staffInvolvementRepository.get()) {                _staffInvolvementScreenState.postValue(_staffInvolvementScreenState.value?.copy(                    isLoading = false,                    firstQuestions = this?.firstQuestions ?: 0.0,                    secondQuestions = this?.secondQuestions ?: 0.0,                    threeQuestions = this?.threeQuestions ?: 0.0,                    fourQuestions = this?.fourQuestions ?: 0.0,                    fiveQuestions = this?.fiveQuestions ?: 0.0,                    sixQuestions = this?.sixQuestions ?: 0.0,                    sevenQuestions = this?.sevenQuestions ?: 0.0,                    eightQuestions = this?.eightQuestions ?: 0.0,                    result = this?.result ?: 0.0,                    newResult = this?.newResult ?: 0.0)                )            }        }    }}