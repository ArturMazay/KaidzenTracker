package com.aistudio.kaidzentracker.android.screensimport android.widget.Toastimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.unit.dpimport androidx.navigation.NavControllerimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.*import com.aistudio.kaidzentracker.android.theme.PrimaryVariantimport com.aistudio.kaidzentracker.android.ui.viewmodels.TrmScreenViewModelimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport org.koin.androidx.compose.koinViewModelimport kotlin.math.floor@OptIn(ExperimentalFoundationApi::class)@Composablefun TRMScreen(    modifier: Modifier,    navController: NavController,    trmScreenViewModel: TrmScreenViewModel = koinViewModel(),) {    val context = LocalContext.current    val state = trmScreenViewModel.trmScreenState.observeAsState().value    var visible by remember { mutableStateOf(false) }    when (state!!.isLoading) {        false -> Box(modifier = modifier            .fillMaxSize()            .background(color = Color.White)) {            LazyColumn(modifier = modifier.padding(bottom = 45.dp)) {                item {                    CommonLogoAppBar(modifier = modifier, isAnimated = visible)                }                stickyHeader {                    CommonHeaderText(                        modifier = modifier,                        textHeader = "ВСЕОБЩАЯ ЭКСПЛУАТАЦИОННАЯ СИСТЕМА ТРМ",                        colorBackgraund = PrimaryVariant,                        height = 28,                        shape = 5,                        paddingHorizontal = 6                    )                }                item {                    CommonTableHeader(modifier = modifier)                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.firstQuestions.toInt(),                        onValueChange = { firstQuestions ->                            trmScreenViewModel                                .getIntent(intent = ApplicationIntent                                    .ChangedFirstQuestions(newResult = firstQuestions))                        },                        numberQuestions = "1",                        textQuestions = "Процент оборудования, механизмов, транспортных средств и дорожно-строительной техники, охваченных системой TPM",                        textRecommendation = "Составить перечень оборудования, механизмов,\n" +                                "транспортных средств и график их обслуживания")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.secondQuestions.toInt(),                        onValueChange = { secondQuestions ->                            trmScreenViewModel                                .getIntent(intent = ApplicationIntent                                    .ChangedSecondQuestions(newResult = secondQuestions))                        },                        numberQuestions = "2",                        textQuestions = "Процент охвата оборудования, механизмов, транспортных средств и дорожностроительной техники чек-листами самостоятельного технического обслуживания с отметками о выполнении проверок",                        textRecommendation = "1. Составить перечень оборудования, механизмов, транспортных средств, на которых персонал производит самостоятельное техническое обслуживание.\n" +                                "2. Составить чек-листы самостоятельного технического обслуживания. 3. Регулярно проводить аудит самостоятельного технического обслуживания.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.threeQuestions.toInt(),                        onValueChange = { threeQuestions ->                            trmScreenViewModel.getIntent(ApplicationIntent.ChangedThreeQuestions(                                newResult = threeQuestions))                        },                        numberQuestions = "3",                        textQuestions = "Процент оборудования, ответственность за внедрение ТРМ на котором закреплена приказом. Ответственность прописана в должностных и функциональных обязанностях.",                        textRecommendation = "Назначить приказом ответственных на проектах за внедрение и обеспечение ТРМ.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fourQuestions.toInt(),                        onValueChange = { fourQuestions ->                            trmScreenViewModel.getIntent(ApplicationIntent.ChangedFourQuestions(                                newResult = fourQuestions))                        },                        numberQuestions = "4",                        textQuestions = "Процент оборудования, для которого ведется учет простоев и их причин",                        textRecommendation = "1. Составить Перечень значимых единиц оборудования, механизмов, транспортных средств.\n" +                                "2. Согласно составленному перечню (п.1) завести Бортовой журнал для регистрации времени работы, времени и причины простоя, перечня замененных узлов и агрегатов, проводимых ремонтных и профилактических мероприятий.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fiveQuestions.toInt(),                        onValueChange = { fiveQuestions ->                            trmScreenViewModel.getIntent(ApplicationIntent.ChangedFiveQuestions(                                newResult = fiveQuestions))                        },                        numberQuestions = "5",                        textQuestions = "Эффективность использования оборудования, транспортных средств обсуждается на рабочих совещаниях не реже 1 раза в месяц.\n" +                                "Решения совещаний запротоколированы (нет-0/да-10)",                        textRecommendation = "Руководителю проекта не менее 1 раза в месяц\n" +                                "на производственных совещаниях обсуждать\n" +                                "Эффективность использования оборудования,\n" +                                "механизмов, транспортных средств и дорожностроительной техники. Принимаемые решения\n" +                                "фиксировать в протоколе.")                }                item {                    val result = floor(state.result * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = result.toString(),                        text = "Итог")                }                item {                    val newResult = floor(state.newResult * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = newResult.toString(),                        text = "Предыдущее значение")                }            }                    CommonButtons(                        modifier = modifier.align(Alignment.BottomCenter),                        onClickSave = {                            Toast.makeText(context, "Сохранено", Toast.LENGTH_SHORT).show()                            trmScreenViewModel.getIntent(intent = ApplicationIntent.SaveClicked)                        },                        onClickDelete = {                            Toast.makeText(context, "Удалено", Toast.LENGTH_SHORT).show()                            trmScreenViewModel.getIntent(intent = ApplicationIntent.DeletedClicked)},                        onClickNext = { navController.navigate(route = "smedScreen") },                        onClickBack = { navController.popBackStack()}                        ,navController = navController                    )        }        true -> FullScreenLoaderComponent(modifier = modifier)    }    LaunchedEffect(key1 = Unit, block = {        trmScreenViewModel.getIntent(intent = ApplicationIntent.InitialScreen)         visible = true    })}