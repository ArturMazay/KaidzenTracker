package com.aistudio.kaidzentracker.android.domain.kdiimport com.aistudio.kaidzentracker.android.data.localDataSource.fiveSDataSource.FiveSDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.flowDataSource.FlowDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.logisticsDataSource.LogisticDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.mappingDataSource.MappingDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.smedDataSource.SmedDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.staffInvolvementDataSource.StaffInvolvementDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.staffTrainigDataSource.StaffTrainingDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.standartWorkDataSource.StandartWorkDataSourceimport com.aistudio.kaidzentracker.android.data.localDataSource.trmDataSource.TrmDataSourceimport com.aistudio.kaidzentracker.android.data.models.KDIQuestionsimport com.himanshoe.charty.combined.model.CombinedBarDataimport kotlin.math.floorclass KDIRepositoryImpl(    private val fiveSDataSource: FiveSDataSource,    private val trmDataSource: TrmDataSource,    private val smedDataSource: SmedDataSource,    private val standartWorkDataSource: StandartWorkDataSource,    private val mappingDataSource: MappingDataSource,    private val staffInvolvementDataSource: StaffInvolvementDataSource,    private val staffTrainingDataSource: StaffTrainingDataSource,    private val logisticDataSource: LogisticDataSource,    private val flowDataSource: FlowDataSource,) : KDIRepository {    override suspend fun getFiveSResult(): Pair<Double?, Double?> {        val firstValue = floor(fiveSDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(fiveSDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getTrmResult(): Pair<Double?, Double?> {        val firstValue = floor(trmDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(trmDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getSmedResult(): Pair<Double?, Double?> {        val firstValue = floor(smedDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(smedDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getStandartWorkResult(): Pair<Double?, Double?> {        val firstValue =            floor(standartWorkDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(standartWorkDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getMappingResult(): Pair<Double?, Double?> {        val firstValue =            floor(mappingDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(mappingDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getFlowResult(): Pair<Double?, Double?> {        val firstValue = floor(flowDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(flowDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getStaffInvonvementResult(): Pair<Double?, Double?> {        val firstValue =            floor(staffInvolvementDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(staffInvolvementDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getStaffTrainingResult(): Pair<Double?, Double?> {        val firstValue =            floor(staffTrainingDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue = floor(staffTrainingDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getLogisticResult(): Pair<Double?, Double?> {        val firstValue =            floor(logisticDataSource.getLocalSource()?.result?.times(10.0) ?: 0.0) / 10.0        val secondValue =            floor(logisticDataSource.getLocalSource()?.newResult?.times(10.0) ?: 0.0) / 10.0        return firstValue to secondValue    }    override suspend fun getAllResult(): KDI = KDI(        listCombine = listOf(            CombinedBarData(xValue = 1,                yBarValue = getFiveSResult().first?.toFloat() ?: 0f,                yLineValue = getFiveSResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 2,                yBarValue = getTrmResult().first?.toFloat() ?: 0f,                yLineValue = getTrmResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 3,                yBarValue = getSmedResult().first?.toFloat() ?: 0f,                yLineValue = getSmedResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 4,                yBarValue = getStandartWorkResult().first?.toFloat() ?: 0f,                yLineValue = getStandartWorkResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 5,                yBarValue = getMappingResult().first?.toFloat() ?: 0f,                yLineValue = getMappingResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 6,                yBarValue = getFlowResult().first?.toFloat() ?: 0f,                yLineValue = getFlowResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 7,                yBarValue = getStaffInvonvementResult().first?.toFloat() ?: 0f,                yLineValue = getStaffInvonvementResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 8,                yBarValue = getStaffTrainingResult().first?.toFloat() ?: 0f,                yLineValue = getStaffTrainingResult().second?.toFloat() ?: 0f),            CombinedBarData(xValue = 9,                yBarValue = getLogisticResult().first?.toFloat() ?: 0f,                yLineValue = getLogisticResult().second?.toFloat() ?: 0f),            ),        listQuestions = listOf(            KDIQuestions(questions = "5 S и визуальный менеджмент",                indexQuestions = "1",                result = getFiveSResult().second ?: 0.0,                route = "5SScreen"            ),            KDIQuestions(questions = "Обслуживание оборудования ТРМ",                indexQuestions = "2",                result = getTrmResult().second ?: 0.0,                route = "trmScreen"            ),            KDIQuestions(questions = "Быстрая переналадка (SMED)",                indexQuestions = "3", result = getSmedResult().second ?: 0.0, route = "smedScreen"),            KDIQuestions(questions = "Стандартизированная работа",                indexQuestions = "4",                result = (getStandartWorkResult().second ?: 0.0), route = "standartWorkScreen"),            KDIQuestions(questions = "Картирование",                indexQuestions = "5",                result = getMappingResult().second ?: 0.0, route = "mappingScreen"),            KDIQuestions(questions = "Выстраивание потока",                indexQuestions = "6",                result = getFlowResult().second ?: 0.0, route = "flowScreen"),            KDIQuestions(questions = "Вовлечение персонала",                indexQuestions = "7",                result = getStaffInvonvementResult().second ?: 0.0,                route = "staffInvolvementScreen"),            KDIQuestions(questions = "Обучение персонала",                indexQuestions = "8",                result = getStandartWorkResult().second ?: 0.0, route = "staffTrainingScreen"),            KDIQuestions(questions = "Логистика",                indexQuestions = "9",                result = getLogisticResult().second ?: 0.0, route = "logisticsScreen"),            KDIQuestions(                questions = "Итого",                indexQuestions = "",                result = (                        ((getFiveSResult().first ?: 0.0) + (getSmedResult().first ?: 0.0) +                                (getTrmResult().first ?: 0.0) +                                (getStandartWorkResult().first ?: 0.0) +                                (getFlowResult().first ?: 0.0) +                                (getLogisticResult().first ?: 0.0) +                                (getStaffInvonvementResult().first ?: 0.0) +                                (getStaffTrainingResult().first ?: 0.0) +                                (getMappingResult().first ?: 0.0)) / 9.toDouble()),                route = "kdiScreen"            )        )    )}