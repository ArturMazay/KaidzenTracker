package com.aistudio.kaidzentracker.android.ui.viewmodelsimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.aistudio.kaidzentracker.android.domain.smed.Smedimport com.aistudio.kaidzentracker.android.domain.standartWork.StandartWorkimport com.aistudio.kaidzentracker.android.domain.standartWork.StandartWorkRepositoryimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.IntentHandlerimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass StandartWorkViewModel(private val standartWorkRepository: StandartWorkRepository) :    ViewModel(), IntentHandler<ApplicationIntent> {    private val _standartWorkScreenState: MutableLiveData<StandartWork> =        MutableLiveData(StandartWork())    val standartWorkScreenState: LiveData<StandartWork> = _standartWorkScreenState    override fun getIntent(intent: ApplicationIntent) {        when (val curentViewState = _standartWorkScreenState.value) {            is StandartWork -> intent(intent, curentViewState)        }    }    private fun intent(intent: ApplicationIntent, curentViewState: StandartWork) {        when (intent) {            is ApplicationIntent.InitialScreen -> loadDataScreen()            is ApplicationIntent.ChangedFirstQuestions -> _standartWorkScreenState.postValue(                _standartWorkScreenState.value?.copy(firstQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedSecondQuestions -> _standartWorkScreenState.postValue(                _standartWorkScreenState.value?.copy(secondQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedThreeQuestions -> _standartWorkScreenState.postValue(                _standartWorkScreenState.value?.copy(threeQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedFourQuestions -> _standartWorkScreenState.postValue(                _standartWorkScreenState.value?.copy(fourQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedFiveQuestions -> _standartWorkScreenState.postValue(                _standartWorkScreenState.value?.copy(fiveQuestions = intent.newResult.toDouble()))            is ApplicationIntent.ChangedSixQuestions -> _standartWorkScreenState.postValue(                _standartWorkScreenState.value?.copy(sixQuestions = intent.newResult.toDouble()))            is ApplicationIntent.SaveClicked -> saveData(state = curentViewState)            is ApplicationIntent.DeletedClicked -> deleteAll()            else -> {}        }    }    private fun saveData(state: StandartWork) {        viewModelScope.launch(Dispatchers.IO) {            val calc = (state.firstQuestions+                    state.secondQuestions +                    state.threeQuestions +                    state.fourQuestions +                    state.fiveQuestions +                    state.sixQuestions                    ) / 6            standartWorkRepository.save(standartWork = StandartWork(                firstQuestions = state.firstQuestions,                secondQuestions = state.secondQuestions,                threeQuestions = state.threeQuestions,                fourQuestions = state.fourQuestions,                fiveQuestions = state.fiveQuestions,                sixQuestions = state.sixQuestions,                result = calc ,                newResult = if(state.result == calc) calc else state.result))            loadDataScreen()        }    }    private fun loadDataScreen() {        viewModelScope.launch(Dispatchers.IO) {            _standartWorkScreenState.postValue(StandartWork(isLoading = true))            with(standartWorkRepository.get()) {                _standartWorkScreenState.postValue(_standartWorkScreenState.value?.copy(                    isLoading = false,                    firstQuestions = this?.firstQuestions ?: 0.0,                    secondQuestions = this?.secondQuestions ?: 0.0,                    threeQuestions = this?.threeQuestions ?: 0.0,                    fourQuestions = this?.fourQuestions ?: 0.0,                    fiveQuestions = this?.fiveQuestions ?: 0.0,                    sixQuestions = this?.sixQuestions ?: 0.0,                    result = this?.result ?: 0.0,                    newResult = this?.newResult ?: 0.0))            }        }    }    private fun deleteAll() {        viewModelScope.launch(Dispatchers.IO) {            standartWorkRepository.delete()            loadDataScreen()        }    }}