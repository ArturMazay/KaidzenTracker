package com.aistudio.kaidzentracker.android.screensimport android.content.Intentimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material.MaterialThemeimport androidx.compose.material.Textimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.core.content.ContextCompatimport androidx.navigation.NavControllerimport com.aistudio.kaidzentracker.android.data.models.KDIQuestionsimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.*import com.aistudio.kaidzentracker.android.theme.*import com.aistudio.kaidzentracker.android.ui.viewmodels.KDIScreenViewModelimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport com.himanshoe.charty.combined.CombinedBarChartimport com.himanshoe.charty.common.axis.AxisConfigimport org.koin.androidx.compose.koinViewModelimport kotlin.math.floor@OptIn(ExperimentalFoundationApi::class)@Composablefun KDIScreens(    modifier: Modifier,    navController: NavController,    kdiScreenViewModel: KDIScreenViewModel = koinViewModel(),) {    val state = kdiScreenViewModel.kdiScreenState.observeAsState().value    val context = LocalContext.current    when (state!!.isLoading) {        false -> LazyColumn(modifier = modifier) {            item {                Box(modifier = modifier                    .padding(horizontal = 20.dp)                    .fillMaxWidth()                    .height(400.dp),                    contentAlignment = Alignment.Center) {                    CombinedBarChart(                        modifier = modifier                            .padding(top = 25.dp)                            .width(250.dp)                            .height(300.dp),                        onClick = { },                        barColor = MaterialTheme.colors.primaryVariant,                        lineColor = MaterialTheme.colors.primary,                        axisConfig = AxisConfig(                            xAxisColor = Primary,                            textColor = Primary,                            yAxisColor = Primary,                            showAxis = true,                            showXLabels = true,                            isAxisDashed = true,                            showUnitLabels = true                        ),                        combinedBarData = state.listCombine                    )                }            }            stickyHeader {                CommonHeaderText(                    modifier = modifier,                    textHeader = "Индекс применения технологий и иснтсрументов Кайдзен (KDI)",                    colorBackgraund = PrimaryVariant,                    height = 28,                    shape = 2,                    paddingHorizontal = 4)            }            item {                Box(modifier = modifier                    .fillMaxWidth()                    .wrapContentHeight()) {                    Row(modifier = modifier                        .padding(end = 4.dp)                        .align(Alignment.CenterEnd)) {                        Box(modifier = modifier                            .wrapContentWidth()                            .wrapContentHeight()                        ) {                            Text(text = "Текущий KDI/Целевой KDI",                                fontSize = 10.sp,                                modifier = modifier                                    .padding(4.dp))                        }                    }                }            }            items(items = state.listQuestions) { list ->                QuestionsItem(                    modifier = modifier,                    listQuestions = list,                    navController                )            }            item {                ButtonStart(modifier = modifier,                    onClick = { navController.navigate(route = "5SScreen") },                    textButtons = "Перейти к вопросам")            }            item {                ButtonStart(modifier = modifier.padding(bottom = 20.dp),                    onClick = {                        val intent = Intent(Intent.ACTION_SEND)                        intent.type = ("image/*")                        ContextCompat.startActivity(                            context,                            Intent.createChooser(intent, "Отправка результата"),                            null                        )                    },                    textButtons = "Отправить на проверку")            }        }        true -> FullScreenLoaderComponent(modifier = modifier)    }    LaunchedEffect(key1 = Unit) {        kdiScreenViewModel.getIntent(intent = ApplicationIntent.InitialScreen)    }}@Composablefun QuestionsItem(    modifier: Modifier,    listQuestions: KDIQuestions,    navController: NavController,) {    Row(modifier = modifier        .padding(horizontal = 4.dp, vertical = 4.dp)        .fillMaxWidth()        .height(35.dp)        .border(width = 2.dp, color = PrimaryVariant)        .padding(4.dp)        .clickable { navController.navigate(listQuestions.route) },        verticalAlignment = Alignment.CenterVertically,        horizontalArrangement = Arrangement.SpaceBetween) {        Text(text = listQuestions.indexQuestions,            fontSize = 10.sp,            style = MaterialTheme.typography.body1,            textAlign = TextAlign.Center,            modifier = modifier        )        Text(            text = listQuestions.questions,            fontSize = 12.sp,            textAlign = TextAlign.Center,            style = MaterialTheme.typography.h1,            fontWeight = FontWeight.Bold,            modifier = modifier        )        val result = floor(listQuestions.result * 10) / 10.0        Text(text = result.toString(),            style = MaterialTheme.typography.body1,            modifier = modifier.padding(end = 4.dp)        )    }}