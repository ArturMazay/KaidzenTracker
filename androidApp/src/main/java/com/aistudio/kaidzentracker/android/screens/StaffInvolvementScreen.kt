package com.aistudio.kaidzentracker.android.screensimport android.widget.Toastimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.unit.dpimport androidx.navigation.NavControllerimport com.aistudio.kaidzentracker.android.screens.commonScreenComponents.*import com.aistudio.kaidzentracker.android.theme.PrimaryVariantimport com.aistudio.kaidzentracker.android.ui.viewmodels.StaffInvolvementViewModelimport com.aistudio.kaidzentracker.android.ui.viewmodels.models.ApplicationIntentimport org.koin.androidx.compose.koinViewModelimport kotlin.math.floor@OptIn(ExperimentalFoundationApi::class)@Composablefun StaffInvolvementScreen(    modifier: Modifier,    navController: NavController,    staffInvolvementViewModel: StaffInvolvementViewModel = koinViewModel(),) {    val context = LocalContext.current    val state = staffInvolvementViewModel.staffInvolvementScreenState.observeAsState().value    var visible by remember { mutableStateOf(false) }    when (state!!.isLoading) {        false -> Box(modifier = modifier            .fillMaxSize()            .background(color = Color.White)) {            LazyColumn(modifier = modifier.padding(bottom = 45.dp)) {                item {                    CommonLogoAppBar(modifier = modifier, isAnimated = visible)                }                stickyHeader {                    CommonHeaderText(                        modifier = modifier,                        textHeader = "ВОВЛЕЧЕНИЕ ПЕРСОНАЛА",                        colorBackgraund = PrimaryVariant,                        height = 28,                        shape = 5,                        paddingHorizontal = 6                    )                }                item {                    CommonTableHeader(modifier = modifier)                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.firstQuestions.toInt(),                        onValueChange = { firstQuestions ->                            staffInvolvementViewModel                                .getIntent(intent = ApplicationIntent                                    .ChangedFirstQuestions(newResult = firstQuestions))                        },                        numberQuestions = "1",                        textQuestions = "Процент персонала, прошедшего обучение по теме \"Виды потерь\"",                        textRecommendation = "Провести занятия с персоналом по теме \"Виды потерь. Kaizen-улучшение\". Разработать программу занятий. Составить пофамильный план обучения с отметками о выполнении и ФИО преподавателя.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.secondQuestions.toInt(),                        onValueChange = { secondQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedSecondQuestions(                                newResult = secondQuestions))                        },                        numberQuestions = "2",                        textQuestions = "Система подачи и учета Kaizen- предложений разработана и внедрена (нет – 0/да – 10)",                        textRecommendation = "Внедрить в подразделениях систему подачи, учета и внедрения Kaizen- предложений")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.threeQuestions.toInt(),                        onValueChange = { threeQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedThreeQuestions(                                newResult = threeQuestions))                        },                        numberQuestions = "3",                        textQuestions = "Система мотивации разработана и применяется (нет –0/да –10)",                        textRecommendation = "Вести учет информации о Kaizen-улучшениях для поощрения сотрудников в соответствии с действующей системой мотивации")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fourQuestions.toInt(),                        onValueChange = { fourQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedFourQuestions(                                newResult = fourQuestions))                        },                        numberQuestions = "4",                        textQuestions = "Процент сотрудников, подавших Kaizen-предложения",                        textRecommendation = "Организовать учет сотрудников, подавших Kaizen-предложения")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.fiveQuestions.toInt(),                        onValueChange = { fiveQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedFiveQuestions(                                newResult = fiveQuestions))                        },                        numberQuestions = "5",                        textQuestions = "Процент внедренных Kaizen-предложений, принятых как стандарт.",                        textRecommendation = "Организовать учет внедренных Kaizenпредложений, принятых как стандарт.")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.sixQuestions.toInt(),                        onValueChange = { sixQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedSixQuestions(                                newResult = sixQuestions))                        },                        numberQuestions = "6",                        textQuestions = "Процент внедренных Kaizen-предложений, имеющих подтвержденный экономический эффект",                        textRecommendation = "1. Организовать учет экономического эффекта от Kaizen-предложений\n" +                                "2. Организовать учет внедренных Kaizenпредложений, имеющих подтвержденный экономический эффект")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.sevenQuestions.toInt(),                        onValueChange = { sevenQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedSevenQuestions(                                newResult = sevenQuestions))                        },                        numberQuestions = "7",                        textQuestions = "Процент предприятий-партнеров, участвующих в\n" +                                "подаче предложений",                        textRecommendation = "Организовать учет предприятий - бизнеспартнеров, подавших Kaizen-предложения")                }                item {                    CommonButtonsInput(modifier = modifier,                        value = state.eightQuestions.toInt(),                        onValueChange = { eightQuestions ->                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.ChangedEightQuestions(                                newResult = eightQuestions))                        },                        numberQuestions = "8",                        textQuestions = "Процент Kaizen-предложений на одного сотрудника от общего числа сотрудников в компании",                        textRecommendation = "1. Еженедельно подводить итоги подачи Kaizenпредложений\n" +                                "2. Определить % поданных на проекте Kaizenпредложений от общего количества\n" +                                "предложений, поданных в компании в пересчете на одного сотрудника")                }                item {                    val result = floor(state.result * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = result.toString(),                        text = "Итог")                }                item {                    val newResult = floor(state.newResult * 10) / 10.0                    ResultView(modifier = modifier,                        textResult = newResult.toString(),                        text = "Предыдущее значение")                }            }                    CommonButtons(                        modifier = modifier.align(Alignment.BottomCenter),                        onClickSave = {                            Toast.makeText(context, "Сохранено", Toast.LENGTH_SHORT).show()                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.SaveClicked)                        },                        onClickDelete = {                            Toast.makeText(context, "Удалено", Toast.LENGTH_SHORT).show()                            staffInvolvementViewModel.getIntent(intent = ApplicationIntent.DeletedClicked)                        },                        onClickNext = { navController.navigate(route = "staffTrainingScreen") },                        onClickBack = { navController.popBackStack() }                        ,navController = navController                    )                }        true -> FullScreenLoaderComponent(modifier = modifier)    }    LaunchedEffect(key1 = Unit, block = {        staffInvolvementViewModel.getIntent(intent = ApplicationIntent.InitialScreen)        visible = true    })}