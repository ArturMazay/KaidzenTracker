package com.aistudio.kaidzentracker.android.navigationsimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.navigation.*import androidx.navigation.compose.ComposeNavigatorimport androidx.navigation.compose.NavHostimport androidx.navigation.compose.composableimport androidx.navigation.compose.rememberNavControllerimport com.aistudio.kaidzentracker.android.screens.*@Composablefun AppNavigation(modifier: Modifier) {    val navController = rememberNavController()    NavHost(navController, startDestination = "splashScreen") {        composable(route = "splashScreen") {            SplashScreen(modifier = modifier, navController = navController)        }        composable(route = "kdiScreen") {            KDIScreens(modifier = modifier, navController = navController)        }        composable(route = "5SScreen") {            FiveSScreen(modifier = modifier, navController = navController)        }        composable(route = "flowScreen") {            FlowScreen(modifier = modifier, navController = navController)        }        composable(route = "logisticsScreen") {            LogisticsScreen(modifier = modifier, navController = navController)        }        composable(route = "mappingScreen") {            MappingScreen(modifier = modifier, navController = navController)        }        composable(route = "smedScreen") {            SMEDScreen(modifier = modifier, navController = navController)        }        composable(route = "staffInvolvementScreen") {            StaffInvolvementScreen(modifier = modifier, navController = navController)        }        composable(route = "staffTrainingScreen") {            StaffTrainingScreen(modifier = modifier, navController = navController)        }        composable(route = "standartWorkScreen") {            StandartWorkScreen(modifier = modifier, navController = navController)        }        composable(route = "trmScreen") {            TRMScreen(modifier = modifier, navController = navController)        }        composable(route = "resumeScreen") {            ResumeScreen(modifier = modifier, navController = navController)        }    }}fun NavGraphBuilder.composable(    route: String,    arguments: List<NamedNavArgument> = emptyList(),    deepLinks: List<NavDeepLink> = emptyList(),    content: @Composable (NavBackStackEntry) -> Unit,) {    addDestination(        ComposeNavigator.Destination(provider[ComposeNavigator::class], content).apply {            this.route = route            arguments.forEach { (argumentName, argument) ->                addArgument(argumentName, argument)            }            deepLinks.forEach { deepLink ->                addDeepLink(deepLink)            }        }    )}